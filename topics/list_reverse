## How do I iterate over a sequence in reverse order?
1) reversed(List) - return iterator BUT NOT list 
Python 2.4 and later has a built-in reversed iterator, which takes an arbitrary sequence, and iterates over it backwards:

for x in reversed(L):
    print(x)

2) List.reverse() - in place reverse
# for earlier versions, it's usually faster to simply reverse the list during the loop

L.reverse()
try: 
    for x in L:
        print(x)
finally:
    L.reverse()

Or - make a copy instread of changing the original list

rev = L[:]
rev.reverse()
for x in rev:
    print(x)

# NOTE: both reverse and the copy operation only copies object references,
#    so they're a lot faster than they may appear(performance depends on the number of items in the list,not the size of those items)

3) Extended slicing - sequence[::-1]
if the sequence is not a list, but supports extended slicing:

for x in sequence[::-1]:
    print(x)

4) xrange(N-1, -1, -1)
for arbitrary sequences, you can do:
for i in xrange(len(sequence)-1, -1, -1):
    x = sequence[i]
    print(x)

5) define reversed function
# this solution is slower than the other examples shown above
# as the method call overhead
class Reversed:
    def __init__(self, seq):
        self.seq = seq
    
    def __len__(self):
        return len(self.seq)

    def __getitem__(self, i):
        return self.seq[-(i+1)]

for x in Reversed(sequence):
    print(x)

