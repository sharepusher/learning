## Reference
# https://realpython.com/blog/python/instance-class-and-static-methods-demystified/

## Key Takeaways
# Instance methods need a class instance and can access the instance through "self".
# Class methods DO NOT need a class instance. They can NOT access the instance(self) but 
#   they have access to the class itself via "cls".
# Static methods Do NOT have access to "cls" or "self". They work like regular functions
#   but belong to the class's namespace.
# Static and class methods communicate and (to a certain degree) enforce developer intent about 
# class design. This can have maintenance benefits.

## Instance, Class, and Static Methods: An Overview
# NOTE: 
# For python2 users: The @staticmethod and @classmethod decorators are available of python2.4
# and this example will work as is.
# Instread of using a plain class MyClass: delcaration you might choose to declare a new-style class 
# inheriting from object with the class MyClass(object): syntax. (Other than that you're golden!)

## Instance Methods
# The first method on MyClass, called method, is a regular instance method.
# That's the basic, on-frills method type you'll use most of the time.
# You can see the method takes one parameter, self, which points to an instance of MyClass when the method
# is called(but of course instance methods can accept more than just one paramter).
# Through the "self" paramter, instance methods can freely access attributes and other methods
# on the same object. This gives them a lot of power when it comes to modifying an object's state.

# Not only can they modify object state, instance methods can also access the class itself through the 
# self.__class__ attribute. This means instance methods can also modify class state.

## Class Methods
# Let's compare that to the second method, MyClass.classmethod. I marked this method with a @classmethod
# decorator to flag it as a class method.
# Instread of accepting a self parameter, class methods takes a cls parameter that points to the class
# and not the object instance, when the method is called.
# Because the class method only has access to this "cls" argument, it can't modify object instance state.
# That would require access to "self".
# However, class methods can still modify class state that applies across all instances of the class.

## Static Methods
# The third method, MyClass.staticmethod was marked with a @staticmethod decorator to flag it as 
# a static method.
# This type of method takes neither a self nor a cls parameter(but of course it's free to accept
# an arbitrary number of other parameters).

# Therefore a static method can NEITHER modify object state NOR class state.
# Static methods are restricted in what data type they can access - and they're primarily a way to 
# namespace your methods.

## Python 2.7 examples for all three method types.
class MyClass:
    def method(self):
        return 'instance method called', self
   
    @classmethod
    def classmethod(cls):
        return 'class method called', cls
    @staticmethod
    def staticmethod():
        return 'static method called'

# Many delicious types of pizzas all have their own names. We'd do well to take advantage of that
# and give the users of our Pizza class a better interface for creating the pizza objects they crave.
# A nice and clean way to do that is by using class methods as "Factory functions" for the different 
# kinds of pizzas we can create:

# Note how I'm using the cls argument in the margherita and prosciutto factory methods instread of calling the
# Pizza constructor directly.
# This is a trick you can use to follow the "Don't Repeat Yourself" principle. If we decide to rename this class
# at some point we won't have to remember updating the constructor name in all of the classmethod factory functions.

class Pizza:
    def __init__(self, ingredients):
        self.ingredients = ingredients
    def __repr__(self):
       Pizza(self.ingredients)
    @classmethod
    def margherita(cls):
        return cls(['mozarella', 'tomatoes'])
    def prosciutto(cls):
        return cls(['mozzarella', 'tomatoes', 'ham'])
   


if __name__ == "__main__":
    print(Pizza(['cheese', 'tomatoes']))
    print(Pizza.margherita())
    obj = MyClass()
    #print(obj.method())
    print(MyClass.method(MyClass()))
    print(MyClass.method(obj))
    # When the method is called, Python replace the 'self' argument with the instance object, obj.
    # We could ignore the syntactic sugar of the dot-call syntax(obj.method()) and pass the instance 
    # object manually to get the same result
    # MyClass.method(obj)
    # can you guess what would happen if you tried to call the method without first creating an instance?
    # Byt the way, instance methods can also access the class itself through the self.__class__ attribute.
    # This makes instance methods powerful in terms of access restrictions - they can modify state on the 
    # object instance and on the class itself.
 
    print(MyClass().classmethod())
    print(MyClass.classmethod())
    # Calling classmethod() showed us it DOESNOT have access to the <MyClass instance> object, but only to 
    # the <class MyClass> object, representing the class itself(everything in Python is an object, even classes
    # themselves).
    # Notice how python automatically passes the class as the first argument to the function when we call
    # MyClass.classmethod(). Calling a method in Python through the dot syntax triggers this behavior.
    # The "self" parameter on instance methods works the same way.
    
    ## Please Note: naming these parameters "self" and "cls" is just a convention.
    # You could just as easily name them "the_object" and "the_class" and get the same result.
    # All that matters is that they're positioned FIRST in the parameter list for method.        

    print(obj.staticmethod())
    print(MyClass.staticmethod())

    ## Some developers are surprised when they learn that it's possible to call a static method on an object
    # instance.
    # Behind the scense Python simply enforces the access restrictions by not passing in the self 
    # or the cls argument when a static method gets called using the dot syntax.

    # This confirms that static methods can neither access the object instance state nor the class state.
    # They work like regular functions but belong to the class's (and every instance's) namespace.

    ##  Now, let's take a look at what happenswhen we attemp to call these methods on the class itself
    # without creating an object instance beforehand.
    # Call classmethod() and staticmethod() just fine, but attempting to call the instance method
    # method() failed with a TypeError.
    # And this is to be expected: This time we didn't create an object instance and tried calling an instance
    # function directly on the class blueprint itself.
    # This means there is no way for Python to populate the "self" argument and therefore the call fails.

 


 















