Segment Tree is a binary tree used for storing the intervals or segments.
Each node in the Segment Tree represents an interval. 
Consider an array A of size N and a corresponding Segment Tree T:
1) The root of T will represent the whole array A[0:N-1]
2) Each leaf in the Segment Tree T will represent a single element A[i] such that 0<= i < N.
3) The internal nodes in the Segment Tree T represents the union of elementary intervals A[i:j] where 0<= i < j < N

The root of the Segment Tree represents the whole array A[0:N-1].
Then it is borken down into two half intervals or segments and the two children of the root in trun
  represent the A[0:(N-1)//2] and A[(N-1)//2+1:(N-1)].
So in each step, the segment is divided into half and the two children represent those two halves.
So the height of the segment tree will be logN.
There are N leaves representing the N elements of the array.
The number of internal nodes is N-1.
so, a total number of nodes are 2N-1.

Once the segment Tree is built, its structure cannot be changed. We can update the values of nodes,
  but we cannot change its structure. Segment Tree provides two operations:
1) UPDATE: To update the element of the array A and reflect the corresponding change in the Segment tree.
2) Query: In this operation we can query on an interval or segment and return the answer to the problem
      (say minimum/maximum/summation in the particular segment).

Implementation:
Since a Segment Tree is a binary tree, a simple linear array can be used to represent the Segment Tree.
Before building the Segment Tree, one must figure out what needs to be stored in the Segment Tree's node.
For example, if the question is to find the sum of all the elements in an array from indices L to R, 
  then at each node(except leaf nodes) the sum of its children nodes is stored.

A Segment Tree can be built using RECURSION(bottom-up approach). 
Start with the leaves and go up to the root, and update the corresponding changes in the nodes that are in the path 
  from leaves to root.
Leaves represent a single element. In each step, the data of two children nodes are used to form an internal parent node
Each internal node will represent a union of its children's intervals. Merging may be different for different questions.
So recursion will end up at the root node which will represent the whole array.

For UPDATE(), search the leaf that contains the element to update. This can be done by going to either on the left
  child or the right child depending on the interval which contains the element. 
Once the leaf is found, it is updated and again use the bottom-up approach to update the corresponding change in the path
  from leaf to the root.

To make a Query() on the Segment Tree, select a range from L to R (which is usually given in the question). 
Recurse on the tree starting from the root and check if the interval represented by the node is completely in the range LtoR.
If the interval represented by a node is completely in the range from LtoR, return that node's value.



 
