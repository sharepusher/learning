## Shallow and Deep Copy

# Introduction
Python has a strange behaviour - in comparsion with other programming languages - when assigning and copying simple 
data types like integers and strings.

The difference between shallow and deep copying is ONLY relevant for compound objects, which are objects containing other 
objects, like lists or class instances.

In the following code sinppet y points to the same memory location as X.
>>> x = 3
>>> y = x
This changes, when we assign a different value to y. 
In this case y will receive a separate memory location.

But even if this internal behaviour appears strange compared with other programming languages,
yet the observable results of the assignments answer our expectations.
But it can be problematic, if we copy mutable objects like lists and dictionaries.

Python creates real copies only if it has to, i.e. if the user, the programmer, explicitly demands it.
Copying a list:
>>> colors1 = ["red", "blue"]
>>> colors2 = colors1
>>> colors2 = ["vert", "rouge"]
>>> print(colors1)
["red", "blue"]
In the example above, a simple list is assigned to colors1. In the next step, we assign color1 to color2.
After this, a new list is assigned to colors2.
As we have expected, the values of colors1 remained unchanged. A new memory location had been allocated for colors2,
because we have assigned a complete new list to this variable.

We assign a new value to the second element of colors2. Lots of beginners will be astonished that the list of 
colors has been "automatically" changed as well.
The explanation is that there has been no new assignment to colors2, only to one of its elements.
>>> colors1 = ["red", "blue"]
>>> colors2 = colors1
>>> colors2[1] = "yellow"
>>> colors1
>>> ["red", "yellow"]

# copy with the slice operator
It is possible to completely copy shallow list structures with the slice operator without having any of the side effects.
>>>list1 = ["a", "b", "c"]
>>>list2 = list1[:]
>>>list2[1] = 'x'
>>>print(list2)
["a", "x", "c"]
>>>print(list1)
["a", "b", "c"]

BUT as soon as a list contians sublists, we have the same problem, i.e. just pointers to the sublists.
If you assign a new value to the 0th element of one of the two lists, there will be no side effect.
Problems arise, if you change one of the elements of the sublist.
>>> lst1 = ["a", "b", ["ab", "cd"]]
>>> lst2 = lst1[:]
>>> list2[0] = "x"
>>> list2[2][1] = "y"
>>> print(lst1)
["a", "b", ["ab","y"]]

# Using the Method deepcopy from the Module copy
A solution to the describled problems is to use the module "copy".
This module provides the method "copy", which allows a complete copy of a arbitrary list,
i.e. shallow and other lists.
>>> from copy import deepcopy
>>>lst1 = ["a", "b", ["c", "d"]]
>>>lst2 = deepcopy(lst1)
>>>list2[2][1]="x"
>>>lst2[0] = "y"
>>>print(lst2)
["y","b",["c","x"]]
>>>print(lst1)
["a", "b", ["c", "d"]]


