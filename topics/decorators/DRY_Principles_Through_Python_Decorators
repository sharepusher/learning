# Python decorators are a powerful tool to remove redundancy.

# decorator receives the method that's wrapping as a variable 'f'
def increment(f):
    # we use arbitrary args and keywords to 
    # ensure we grab all the input arguments.

    def wrapped_f(*args, **kw):
        # note we call f against the variables passed into the wrapper,
        # and cast the result to an int and increment.
        return int(f(*args, **kw)) + 1
    # the wrapped function gets returned.
    return wrapped_f 

@increment
def plus(a, b):
    return a + b

result = plus(4, 6)
assert(result == 11, "Wrong decorator!")


# say, Django framework

# handle requests by method which receive a method object and return a response object
def handle_request(request):
    return HttpResponse("what's up!")

def register(request):
    result = None
    # check http method, allow POST ONLY.
    if request.method != "POST":
        result = {"error": "ONLY POST method allowed!"}
    else:
        try:
            user = User.objects.create_user(
                request.POST['username'],
                request.POST['email'],
                request.POST['password'])
            # optional fields
            for field in ['first_name', 'last_name']:
                if field in request.POST:
                    setattr(user, field, request.POST[field])
            user.save()
            result = {"success": True}
        except KeyError as e:
            result = {"error": str(e)}
    response = HttpResponse(json.dumps(result))
    if "error" in result:
        response.status_code = 500
    return response

# return an error on non-post requests by decorator

def post_only(f):
    """ Ensures a method is post only """
    def wrapped_f(request):
        if request.method != "POST":
            response = HttpResponse(json.dumps({
                "error": "this method only accepts posts!"
            }))
            response.status_code = 500
            return response
         return f(request)
    return wrapped_f

@post_only
def register(request):
    result = None
    try:
        user = User.objects.create_user(request.POST['username'],
            request.POST['email'],
            request.POST['password']
        )
        # optional fields
        for field in ['first_name', 'last_name']:
            if field in request.POST:
                setattr(user, field, request.POST[field])
        user.save()
        result = {"success": True}
    except KeyError as e:
        result = {"error": str(e)}
    response = HttpResponse(json.dumps(result))
    if "error" in result:
        response.status_code = 500
    return response

# sendd the response as json and also handle http 500
def json_response(f):
    def wrapped(*args, **kwargs):
        result = f(*args, **kwargs)
        response = HttpResponse(json.dumps(result))
        if type(result) == dict and 'error' in result:
            response.status_code = 500
        return response

@json_response
@post_only
def register(request):
    try:
        user = User.objects.create_user(request.POST['username'],
            request.POST['email'],
            request.POST['password']
        )
        # optional fields
        for field in ['first_name', 'last_name']:
            if field in request.POST:
                setattr(user, field, request.POST[field])
        user.save()
        return {"success": True}
    except KeyError as e:
        return {"error": str(e)}

