## Reference
# https://realpython.com/primer-on-python-decorators/

## Intr
# A decorator is a function that takes another function and extends the behavior of the latter function without explicitly modifying it.

## Functions
# A function returns a value based on the given arguments.

def add_one(number):
    return number + 1
print(add_one(2))

## First-Class Objects
# functions are first-class objects. 
# This means that functions can be passed around and used as arguments,just like any other object(string, int, and soon).

def say_hi(name):
    return "hello {}".format(name)
def be_awesome(name):
    return "Yo {}, together we are the awesomest!".format(name)
def greet_bob(greeter_func):
    return greeter_func("Bob")

# The function is named without parentheses, this means that only a reference to the function is passed.
# The function is not executed.
print(greet_bob(say_hi))
print(greet_bob(be_awesome))

## Inner Functions: define functions in function
# It's possible to define functions inside other functions. Such functions are called inner functions.

def parent():
    print("printing from the parent function")
    def first_child():
        print("printing from the first child function")
    def second_child():
        print("printing from the second_child function")
    second_child()
    first_child()
# 1) NOTE that the order in which the inner functions are defined DOES NOT matter.
# Like with any other functions, the printing only happends when the inner functions are executed.
# 2) Futhermore, the inner functions are not defined UNTIL the parent function is called.
#    They are locally scoped to parent(): they ONLY exist inside the parent() function as LOCAL variables.
#    Try calling first_child(). You should get an error.
# 
parent()
#first_child()

## Returning Functions From Functions
# Python also allows you to use functions as return values.
def parent(num):
    def first_child():
        return "Hi, I am Emma"
    def second_child():
        return "Call me Liam"
    # NOTE: that you are returning first_child without the parentheses.
    # Recall that this means that you are returning a Reference to the function first_child.
    # In contrast first_child() with parentheses refers to the result of evaluating the function.
    if num == 1:
        return first_child
    else:
        return second_child
first = parent(1)
second = parent(2)
# The first variable refers to the local first_child() function inside of parent()
# while the second points to second child()
# In this case, we can use first and second as if they are regular functions.
# Even though the functions they point to CanNOT be accessed directly.
print(first,second)
print(first(), second())

## Simple Decorators
# Function are just like any other object in Python.
def my_decorator(func):
    def wrapper():
        print("sth is happening before the function is called.")
        func()
        print("sth is happending after the function is called.")
    return wrapper

def say_whee():
    print("Whee!")

# The name say_whee now points to the wrapper() inner function.
# wrapper as a function is returned when my_decorator is called.
# However, wrapper() has a reference to the original say_whee() as fun
# and calls that function between the two calls to print()

say_whee = my_decorator(say_whee)

say_whee()

# The say_whee is not the original way_whee any more.
# Put simply: decorators wrap a function, modifying its behavior.

print(say_whee)

from datetime import datetime
def not_during_the_night(func):
    def wrapper():
        # Because wrapper() is a regular Python function
        # The way a decorator modifies a function can change dynamically
        if 7 <= datetime.now().hour < 22:
            func()
    return wrapper
def say_whee():
    print("Whee!")
say_whee = not_during_the_night(say_whee)

## Syntactic Sugar!
# The way decorated say_whee() above is a little clunky.
# first of all, you end up typing the name say_whee three times.
# in addition, the decoration gets a bit hidden away below the definition of the function
# Instead, Python use decorators in a simpler way with the @symbol.
# Sometimes called the "pie" syntax. 
def my_decorator(func):
    def wrapper():
        print("before")
        func()
        print("After")
    return wrapper
# @my_decorator is just an easier way of saying say_whee = my_decorator(say_whee)
@my_decorator
def say_whee():
    print("whee!")

## Reusing Decorators
# Recall that a decorator is JUST a regular Python function.
# All the usual tools for easy reusability are available.
# Just move the decorator to its own module that can be used in many other functions.

def do_twice(func):
    def wrapper_do_twice():
        func()
        func()
    return wrapper_do_twice
# NOTE: you can name your inner function whatever you want, and a generic name like wrapper is okay.

@do_twice
def say_whee():
    print("whee!")

say_whee()

## Decorating Functions With Arguments
# The solution is use *args and **kwargs in the inner wrapper function.
# The it will accept arbitrary number of positional and keyword argumetns.
def do_twice_with_args(func):
    def wrapper_do_twice(*args, **kwargs):
        func(*args, **kwargs)
        func(*args, **kwargs)
    return wrapper_do_twice
# The wrapper_do_twice() inner function now accepts any number of arguments and passes them 

@do_twice_with_args
def greet(name):
    print("hello {}".format(name))

greet("what the func")

## Returning Values From Decorated Functions
@do_twice_with_args
def return_greeting(name):
    print("creating greetings")
    return("Hi, {}".format(name))

hi_adam = return_greeting("ADAM!")
print(hi_adam)
# The decorator did NOT return values
# Because the do_twice_with_args() doesn't explictily return a value.
# The call return_greeting() ended up returning None.
# To fix this, we have to MAKE SURE the wrapper function returns the return value of the decorated function.

def do_twice_with_args(func):
    def wrapper_do_twice(*args, **kwargs):
        func(*args, **kwargs)
        return func(*args, **kwargs)
    return wrapper_do_twice

@do_twice_with_args
def return_greeting(name):
    print("greetings!")
    return("hi, {}".format(name))

print(return_greeting("WANG!"))


