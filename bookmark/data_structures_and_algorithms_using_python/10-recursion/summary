## Introduction

# Recursion is a process for solving problems by SUB-DIVIDING a large problem into smaller cases
# of the problem itself and then solving the smaller, more trival parts.

# Recursion is a powerful programming and problem-solving tool.
# It can be used with a wide range of problems from basic traditional iterations to the more
# advanced backtracking problems.

# While recursion is very powerful, recursive solutions are not always the most efficient.

# In some instances, however, recursion is the implementation of choice as it allows us to easily develop 
# a solution for a complicated problem that may otherwise be difficult to solve.

## Properties of Recursion
# All recursive solutions must satisfy THREE rules or properties:
# 1) A recursive solution MUST contian a BASE CASE.
# 2) A recursive solution MUST contain a RECURSIVE CASE
# 3) A recursive solution MUST make progress toward the base case.

# A recursive solution subdivides a problem into smaller versions of itself.

# For a problem to be subdivided, it typically must consist of a data set or a term that can be dividied 
# into smaller sets or a smaller term.
# This subdivision is handled by the "recursive case" when the function calls itself.

# A recursive solution MUST make progress toward the base case or the recursion will never stop resulting
# in an infinite virtual loop.
# This progression typically occurs in each recursive call when the larger problem
# is divided into smaller parts.
# The larger data set is subdivided into smaller sets or the larger term 
# is reduced to a smaller value by each recursive call.

## The Run Time Stack
# Each Time a function is called, an activation record is automatically created in order to maintain information 
# related to the function.
# One piece of information is the RETRUN ADDRESS.
# This is the location of the next instruction to be executed when the function terminates.
# Thus, when a function returns, the address is obtained from the activation record and the flow execution
# can return to where it left off before the function was called.

# The activation records also include storage space for the allocation of local variables.
# Remember, a variable created within a function is local to that function and
# is said to have local scope. 
# Local variables are created when a function begins execution and are destroyed when the function terminates.
# The lifetime of a local variable is the duration of the function in which it was created.

# An activation record is created per function call, NOT on a per function basis.
# When a function is called, an activation record is created for that call
# and when it terminates the activation record is destroyed.

# The system must manage the collection of activation records and remember the order in which they were created.
# The latter is necessary to allow the system to backtrack or return to the next statement in the previous function
# when an invoked function terminates.
# It does this by storing the activation records on a RUN TIME STACK.
# The run time stack is just like the stack structure, but it's hidden from the programmer and is automatically maintained.
#  
