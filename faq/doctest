Summary:
doctest is used to test interactive python examples.

What is doctest?
The doctest module searches for pieces of text that look like interactive Python sessions,
and then executes those sessions to verify that they work exactly as shown.

How to use doctest?
There are several common ways to use doctest:
1) To check that a module's docstrings are up-to-date by verifying that all interactive examples still work as documented.
2) To perform regression testing by verifying that interactive examples from a test file or a test object work as expected.
3) To write tutorial documentation for a package, liberally illustrated with input-output examples.
   Depending on whether the examples or the expository text are emphasized, this has the flavor of "literate testing" or 
   "executable documentation"

Examples:
1) Checking examples in Docstrings
The simplest way to start using doctest(but not necessarily the way you'll continue to do it) is to end each module with:
if __name__ == "__main__":
    import doctest
    doctest.testmod()
Run the module as a script causes the examples in the docstrings to get executed and verified.

This won't display anything unless an example fails, in which case the failing examples and the cause of the failures are printed to stdout, and the final line of output is ***Test Failed*** N failures, where N is the number of examples that failed.

Run it with the -v switch instead: python M.py -v
a detailed report of all examples tried is printed to standard output, along with assorted summaries at the end.

You can force verbose mode by passing verbose=True to testmod(), or prohibit it by passing verbose=False.

Since python2.6, there is also a command line shortcut for running testmod(). You can instruct the Python interpreter to run the doctest module directly from the standard library and pass the module names on the command line:
python -m doctest -v example.py

This will import example.py as a standalone module and run testmod() on it.
Note that this may not work correctly if the file is part of a package and imports other submodules from that package.

2) Checking examples in a text file.
Another simple application of doctest is testing interactive examples in a text file.
This can be done with the testfile() function:

import doctest
doctest.testfile("example.txt")

That short script executes and verifies any interactive Python examples contained in the file example.txt. 
The file content is treated as if it were a single giant docstring; the file does NOT need to contain a Python program!!!!
By default, testfile() looks for files in the calling modules directory.

Like testmod(), testfile()'s verbosity can be set with the -v command-line switch or with the optional keyword argument verbose.
Since Python2.6, there is also a command line shortcut for running testfile(). 
You can instruct the Python interpreter to run the doctest module directly from the standard library and pass the file names on the command line.

python -m doctest -v example.txt

Because the file name does not end with .py, doctest infers that it must be run with testfile(), not testmod().
 
