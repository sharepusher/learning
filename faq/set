## Reference
https://docs.python.org/2/library/sets.html
https://wiki.python.org/moin/TimeComplexity
https://stackoverflow.com/questions/7351459/time-complexity-of-python-set-operations

## keywords
Unordered, Unique

What is set?
A set is an unordered collection with no duplicate elements, which is implemented as a hashtable.
The lookup/insert in O(1) average.
Like other collections, sets support 'x in set, len(set), and for x in set'.
Being an unordered collection, sets DO NOT record element position or order of insertion.
Accordingly, sets DO NOT support indexing, slicing, or other sequence-like behavior.

When to use it?
Basic uses incude membership testing and eliminating duplicate entries.
Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.
Common uses: 
1) membership testing; 
2) removing duplicates from a sequence;
3) computing standard math operations on sets such as intersection, union, difference, and symmetric difference.


How to use it ?
Curly braces or the set() function can be used to create sets.
NOTE: to create an empty set you HAVE TO use set(), not {}; the latter creates an empty dictionary!!!
There are currently two built-in set types, set and frozenset. 
The set type is mutable, the contents can be changed using methods like add() and remove().
    Since it is mutable, it has NO hash value and CAN NOT be used either a dictionary key or as an element of another set.
The frozenset type is immutable and hashable. Its content can NOT be altered after it is created;
    it can therefore be used as a dictionary key or as an element of another set.
As of Python2.7, non-empty sets(not frozensets) can be created by placing a comma-separated list of elements within braces,
for example: {'jack', 'sjoerd'}, in addition to the set constructor.
class set([iterable])
class frozenset([iterable])

Set Objects
Instances of Set and ImmutableSet both provide the following operations
1) len(s)
2) x in s
3) x not in s
4) s.issubset(t)
5) s.issuperset(t)
6) s.union(t)
7) s.intersection(t)
8) s.difference(t)
9) s.symmetric_difference(t)
10) s. copy()

The following lists operations available in set BUT NOT in ImmutableSet
1) s.add(x) - add element x to set s
2) s.remove(x) - remove x from set s; raises KeyError if not present
3) s.discard(x) - removes x from set s if present
4) s.pop() - remove and return an arbitrary element from s; raises KeyError if empty
5) s.clear() - remove all elements from set s

Examples:
>>> a = {'a', 'b'}
>>> a
set(['a', 'b'])
>>> a.add('c')
>>> a
set(['a', 'c', 'b'])
>>> a.remove('b')
>>> a
set(['a', 'c'])
>>> type(a)
<type 'set'>
>>> b = {}
>>> b
{}
>>> type(b)
<type 'dict'>

