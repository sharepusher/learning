Reference:
https://www.programiz.com/python-programming/decorator

Summary:
1) Decorator won't alter the function that will be decorated.
2) Decorator only make the decoration based on the original function
3) Decorator is a closure, it will take the function to be decorated as parameter, and return the inner/nested function
4) Decorator will overwrite/construct the original function with its orignal function name.
5) Python has a syntax to simplify the decoration construct by @decrator
6) Decorator can work with any number of parameter of target function by inner(*args, **kwargs)
7) Chaining decorators works just like stack, the closest one is the first decorated, the outer one is the last. 

What you need to know before learning decorators?

1) Everything in Python(Even classes), are objects. Names that we define are simply identifiers bound to those objects.
   Functions are no exceptions, they are objects too(with attributes). 
   Various different names can be bound to the same function object.
   say, when you run the code, both function func_name1 and func_name2 gives same result, as they refer to the same object.
   def func_name1(msg):
       print(msg)
   func_name1("whatup")
   # assign a new name to the func 
   func_name2 = func_name1
   func_name2("new whatup!")

2) Higher order function(functional, functional form, or functor).
   A function that does at least ONE of the following:
   Take oen or more functions as arguments; returns a function as its result.
   
   Functions can be passed as arguments to another function.
   If you have used functions like map, filter and reduce in Python, then you already know about this.
   Such function that take other functions as arguments are also called higher order functions.
   def inc(x):
       """Function to increase value by 1"""
       return x+1
   def dec(x):
       """Function to decrease value by 1
       """
       return x-1
   def operate(func, x):
       """A higher order function to increase or decrease
       """
       result = func(x)
       return result
    operate(inc, 3)
    operate(dec, 3)

    Furthermore, a function can return another function.
    is_returned() is a nested function which is defined and returned, each time we call is_called().
    def is_called():
        def is_returned():
            print("whatup")
        return is_returned
    # no ouput
    new_call = is_called()
    # output "whatup"
    new_call()

3) closure(lexical closures, or function closures).
   A closure is a record storing a function together with an environment.


Decorrators.
Basically, a decorator TAKEs in a function, ADDs some functionality and RETURNs it.
1) callable
Functions and methods are called callable, as they can be called.
In fact, any object which implements the special method __call__() is termed callable.
In the most basic sense, a decorator is a callable that returns a callable.

In the example, make_pretty() is a decorator.
In the assignment step, prettyone = make_pretty(ordinary), the function ordinary() got decorated,
and the returned function was given the name pretty.

def make_pretty(func):
    def inner():
        print("Got decorated!")
        func()
    return inner()
def ordinary():
    print("NOT decorated.")
# call ordinary directly
# it will output "NOT decorated."
ordinary()

# after decorate the ordinary func
# output noting
prettyone = make_pretty(ordinary)
# output "Got decorated" first, then the original ordinary.
prettyone()

We can see that the decorator function added some NEW functionality to the original function.
This is similar to packing a gift. The decorator acts as a wrapper. 
The nature of the object that got decorated(the actual gift inside) does NOT alter.
BUT now, it looks pretty(since it's decorated).

Generally, we decorate a function and RE-ASSIGN it as: ordinary = decorator(ordinary).
This is a common construct and for this reason, Python has a syntax to simplify this.

We can use the @symbol along with the name of the decorator function, 
and place it above the defination of the function to be decorated. 
This is just a syntactic sugar to implement decorators.
For example,
@make_pretty
def ordinary():
    print("I am ordinary")
is equivalent to:
def ordinary():
    print("I am ordinary")
ordinary = make_pretty(ordinary)


What if Decorating Functions with Parameters?
This function has two parameters, a and b, we know it will give error if passing b as 0.
def divide(a, b):
    return a/b
Now, let's make a decorator to check for this case that will cause the error.

# this is the decorator func
def better_divide(func):
    def inner(a, b):
        print("handle b equals to 0")
        if b == 0:
            print("whooops! cannot divide")
            return 
        return func(a, b)
    return inner

@better_divide
def divide(a, b):
    return a/b

The parameters of the nested inner() function inside the decorator is the same as the parameters of functions decorated.
Taking this account, now we can make general decorators that work with any number of parameter.

In Python, this magic is done as function(*args, **kwargs).
In this way, args will be the tuple of positional arguments, and kwargs will be the Dictionary of keyword arguments.
An example of such decorator will be.

def general_decorator(func):
    def inner(*args, **kwargs):
        print("Decorate the function with any parameters")
        return func(*args, **kwargs)
    return inner



Chaining Decorators in Python
Multiple decorators can be chained in Python.
This is to say, a function can be decorated multiple times with different or same decorators.
We simply place the decorators above the desired function.

def star(func):
    def inner(*args, **kwargs):
        print("*" * 30)
        func(*args, **kwargs)
        print("*" * 30)
    return inner

def percent(func):
    def inner(*args, **kwargs):
        print("%" * 30)
        func(*args, **kwargs)
        print("%" * 30)
    return inner   
 
@star
@percent
def printer(msg):
    print(msg)
printer("Whoops!!")

# the output
******************************
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
what the func
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
******************************

The above syntax is equivalent to:
def printer(msg):
    print(msg)
printer = star(percent(printer))
which just like a stack, FIFO


