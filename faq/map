## map(function, iterable, ...)
# Apply function to every item of iterable and return a LIST of the results.
# If additional iterable arguments are passed, funciton must take that many arguments and is applied to the items# from all iterables in parallel.

# If one iterable is shorter than another, it is assumed to consisting of tuples containing the
# corresponding items from all iterables(a kind of transpose operation).

# The iterable arguments may be a sequence or any iterable object; the result is always a LIST.

# There are three built-in functions that are very useful when used with lists: filter(); map(); and reduce().

# map(function, sequence) calls function(item) for each of the sequence's items and returns a list of the 
# return values.
# For example, to compute some cubes:
def cube(x):
    return x*x*x
map(cube, range(1, 11))

# [1, 8, 27, 64, ......]

## More than one sequence may be passed: the function must then have as many arguments as there are sequences
# and is called with the corresponding item from each sequence (or None if some sequence is shorter than another)

seq = range(8)
def add(x,y):
    return x+y
map(add, seq, seq)

## [0, 2, 4, 6, 8, 10, 12, 14]

