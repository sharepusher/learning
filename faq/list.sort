#
# Summary - list.sort() vs sorted(list/str/generators)
#
list.sort() makes in-place sort, and return None to indicate that.
sorted() always creates a new list and return the list after sorting. 
>>> sorted("329375")
['2', '3', '3', '5', '7', '9']  

The list.sort() method sorts a list IN PLACE, that is, without making a copy.
It returns None to remind us that it changes the target(original) object,
and does not create a new list. 

This is an important Python API convention:
Functions or methods that change an object in place SHOULD return None to make it clear to the caller,
that the object itself was changed, and no new object was created.
The same behavior can be seen in the random.shuffle function.

The convention of returning None to signal in-place changes has a drawback:
you can NOT cascade calls to those methods. In contrast, methods that return new objects(e.g., all str methods)
can be cascaded in the fluent interface style.

In contrast, the built-in function sorted creates a new list and returns it.
In fact, it accepts any iterable object as an argument, including immutable sequences and generators.
Regardless of the type of iterable given to sorted, it ALWAYS returns a newly created list.

Both list.sort and sorted take two optional, keyword-only arguments.

reverse:
If True, the items are returned in descending(i.e., by reversing the comparison of the items).
The default is False.

key:
A ONE-argument FUNCTION that will be applied to each item to produce its sorting key.
For example, when sorting a list of strings, key=str.lower can be used to perform a case-insensitive sort,
and key=len will sort the strings by character length. 
The default is the identity function(i.e., the items themselves are compared).



key:
