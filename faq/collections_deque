# collection.deque
New in version2.4
List-like container with fast appends and pops on either end
class collections.deque([iterable[, maxlen]])
Returns a new deque object initialized left-to-right (using append()) with data from iterable.
If iterable is not specified, the new deque is empty.

Deques are a generalization of stacks and queues(the name is pronounced "deck" and is short for "double-ended queue").
Deques support thread-safe, memory efficent appends and pops from either side of the deque with approximately the same O(1)
    performance in either direction.
Though list objects support similar operations, they are optimized for fast fixed-length operations and incur O(N) memory movement
    costs for pop(0) and insert(0, v) operations which change both the size and position of the underlying data representation.

If "maxlen" is not specified or is None, deques may grow to an arbitrary length.
Otherwise, the deque is bounded to the specified maximum length.
Once a bounded length deque is full, when new items are added, a corresponding number of items are discarded from 
    the opposite end. Bounded length deques provide functionality similar to the tail filter in Unix.
They are also useful for tracking transactions and other pools of data where only the most recent activity is of interest.

Deque objects support the following methods:
append(x) - Add x to the right side of the deque,
    i.e.if it's not specified the direction, it will be right part, which is the same method as list.
appendleft(x) - Add x to the left side of the deque.
clear() - Remove all elements from the deque leaving it with length 0.

count(x) - Count the number of deque elements equal to x.
pop() - Remove and return and element from the right side of the deque.
    If no elements are present, raises an IndexErrror.
    This is similar to list.pop()
popleft() - Remove and return an element from the left side of the deque. If no elements are present, raises and IndexError.
remove(value) - Removed the first occurence of value. If not found, raises a ValueError.
reverse() - Reverse the elements of the deque in-place and then return None.

NOTE: 
In additon to the above, deques support iteration, pickling, len(d), reversed(d), copy.copy(d), copy.deepcopy(d),
membership testing with the in operator, and subscript references such as d[-1].
Indexed access is O(1) at both ends, BUT SLOWS to O(N) in the middle. 
For fast random access, use lists instead. 



