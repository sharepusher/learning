1. The operator module exports a set of efficient functions corresponding to the intrinsic operators of Python. For example, operator.add(x, y) is equivalent to the expression x+y. 
operator.getitem(a, b)
operator.__getitem__(a, b)
Return the value of a at index b.


2. The operator module also defines tools for generalized attribute and item lookups.
There are useful for making fast field extractors as arguments for map(), sorted, itertools.groupby(), or other functions that expect a function argument.

1) operator.attrgetter(attr)
operator.attrgetter(*attrs)
Return a callable object that fetches attr from its operand. 
If more than one attribute is requested, returns a tuple of attributes.
The attribute names can also contain dots. For example:
After f = attrgetter('name'), the call f(b) returns b.name
After f = attrgetter('name', 'date'), the call f(b) returns (b.name, b.date)
After f = attrgetter('name.first', 'name.last'), the call f(b) returns(b.name.first, b.name.last)
Equivalent to:
def attrgetter(*items):
    if len(items) == 1:
        def g(obj):
            return resolve_attr(obj, attr)
    else:
        def g(obj):
            return tuple(resolve_attr(obj, attr) for attr in items)
    return g

def resolve_attr(obj, attr):
    for name in attr.split("."):
        obj = getattr(obj, name)
    return obj

2) operator.itemgetter(item)
operator.itemgetter(*items)
Return a callable object that fetches item from its operand using the operand's __getitem__() method.
If multiple items are specified, returns a tuple of lookup values. 
For example:
After f = itemgetter(2), the call f(r) returns r[2]
After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3]).
Equivalent to:
def itemgetter(*items):
    if len(items) == 1:
        item = items[0]
        def g(obj):
            return obj[item]
    else:
        def g(obj):
            return tuple(obj[item] for item in items)
    return g
The items can be any type accepted by the operand's __getitem__() method. Dictionaries accept any hashable value. Lists, tuples, and strings accept an index or a slice:
>>> itemgetter(1)('ABCDEFG')
'B'
>>> itemgetter(1, 3, 5)('ABCDEFG')
('B', 'D', 'F')
>>> itemgetter(slice(2, None))('ABCDEFG')
'CDEFG'

